#!/bin/bash

verbose=false

cmd() {
  local command=("$@")

  if [ "$verbose" == true ]; then
    echo "Running command: ${command[*]}"
    "${command[@]}"
  else
    "${command[@]}" > /dev/null 2>&1
  fi
}

if [[ "$OSTYPE" != "linux-gnu"* ]]; then
  echo "This script is only for Linux"
  exit 1
fi

source /etc/os-release # now ge can get the distro in #ID

if [[ "$ID" == "fedora" ]]; then
  echo "... running dnf update"
  sudo dnf update -y 
  echo "✅ dnf updated"

  echo ... installing git alacritty zsh stow fzf make cmake gcc nodejs npm gh ripgrep wl-clipboard
  sudo dnf install -y git alacritty zsh stow fzf make cmake gcc nodejs npm gh ripgrep wl-clipboard
  echo ✅ packages installed
else
  echo "Distro not supported :/"
  echo "going to proceed anyway ..."
fi

# =================================
# SSh keys + Github
# =================================
if [ ! -f ~/.ssh/id_rsa ]; then
  ssh-keygen
fi

if ! gh auth status >/dev/null 2>&1; then
    gh auth login
fi

git config --global init.defaultBranch main
git config push.default current # seems to make sense to me idk

git config --global user.email "felipe.trost@gmail.com"
git config --global user.name "Felipe Trost"

# =================================
# General stuff
# =================================

mkdir -p ~/tools  
mkdir -p ~/projects/work  
mkdir -p ~/projects/personal  
mkdir -p ~/projects/uniprojects

# =================================
# Install neovim
# =================================
echo "... Installing neovim"
cd ~/tools
cmd git clone https://github.com/neovim/neovim.git
cd neovim
cmd git fetch --all
tag=$(git tag | fzf --header="-> NVIM version (Ctl-C to skip)")
if [ -n "$tag" ]; then
  echo "Installing neovim version $tag"
  cmd git checkout "tags/$tag"
  make CMAKE_BUILD_TYPE=RelWithDebInfo
  sudo make install
  echo "✅ Installed neovim"
else
  echo "❌ Neovim Skipped"
fi

# =================================
# Install Tmux
# =================================
echo "... Installing tmux"
cd ~/tools
cmd git clone https://github.com/tmux/tmux.git
cd tmux
cmd git fetch --all
tag=$(git tag | fzf --header="-> TMUX version (Ctl-C to skip)")
if [ -n "$tag" ]; then
  echo "Installing tmux version $tag"
  cmd git checkout "tags/$tag"
  cmd sh autogen.sh
  cmd ./configure
  cmd make
  echo "✅ Installed tmux"
else
  echo "❌ tmux Skipped"
fi
#plugins
mkdir -p ~/.tmux/plugins/tpm
cmd git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm

# =================================
# Install OhMyZsh
# =================================
if [ -z "$ZSH" ]; then
  echo "... Installing oh-my-zsh"
  cmd $(yes | sh -c "$(curl -fsSL https://install.ohmyz.sh/)")
  cmd git clone https://github.com/zsh-users/zsh-autosuggestions ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions
  cmd git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting
  rm ~/.zshrc # remove file generated by ohmyzsh
  echo "✅ Installed oh-my-zsh"
else
  echo "✅ oh-my-zsh already insalled"
fi
echo "Set zsh as default shell"
sudo chsh -s "$(which zsh)" "$USER"
echo "✅ Set zsh as default shell"

# =================================
# Install Nerdfonts
# =================================
if [ ! -d ~/.local/share/fonts/jetbrains ]; then
  echo "... Installing JetBrainsMono Nerd Font"
  mkdir -p ~/.local/share/fonts/jetbrains
  cmd wget https://github.com/ryanoasis/nerd-fonts/releases/download/v3.1.1/JetBrainsMono.tar.xz
  cmd tar -xf JetBrainsMono.tar.xz -C ~/.local/share/fonts/jetbrains
  cmd rm ./JetBrainsMono.tar.xz
  cmd fc-cache -f # force font cache update
  echo "✅ Installed JetBrainsMono Nerd Font"
else
  echo "❌ nerdfont already installed"
fi

# =================================
# Stow
# =================================
echo "... Using stow to symlink dotfiles"
mv ~/.bashrc ~/.bashrc.bak # for stow to link a new one
stow .
echo "✅ Used stow to symlink dotfiles"


# =================================
# 🚀🚀🚀🚀🚀
# =================================

echo "Done! 🚀🚀"
